package org.technologybrewery;

import groovy.lang.Closure;
import org.gradle.api.file.ConfigurableFileCollection;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.file.FileTreeElement;
import org.gradle.api.model.ObjectFactory;
import org.gradle.api.provider.Property;
import org.gradle.api.specs.Spec;
import org.gradle.api.tasks.util.PatternFilterable;
import org.gradle.api.tasks.util.PatternSet;

/**
 * Configuration for {@link FlywayJavaMigrationChecksumPlugin} that enables plugin users to specify for which Java
 * source files will checksums be generated, as well as the name and target location of the generated checksum enum
 * class.
 */
public abstract class FlywayJavaMigrationChecksumPluginExtension {

	/**
	 * Contains Java-based Flyway migration source files for which checksums are desired to be generated. The
	 * exact set of source files may be further filtered within {@link GenerateJavaMigrationChecksumTask} via
	 * Ant-style include/exclude patterns specified in {@link #patternSet}.
	 */
	private final ConfigurableFileCollection migrationSourceFiles;

	/**
	 * Captures Ant-style include/exclude filter patterns that may be applied to the source files contained in
	 * {@link #migrationSourceFiles} to represent the final set of migration source files for which checksums
	 * will be generated by {@link GenerateJavaMigrationChecksumTask}.
	 */
	private final PatternFilterable patternSet = new PatternSet();

	public FlywayJavaMigrationChecksumPluginExtension(ObjectFactory objectFactory) {
		this.migrationSourceFiles = objectFactory.fileCollection();
	}

	/**
	 * Gets the destination directory at which the generated enum will be created.
	 *
	 * @return destination at which the generated enum will be created.
	 */
	public abstract DirectoryProperty getDestination();

	/**
	 * Gets the fully qualified name of the generated enum class that contains migration checksums.
	 *
	 * @return fully quality class name of the generated enum containing migration checksums.
	 */
	public abstract Property<String> getChecksumEnumClassName();


	/**
	 * Gets the migration source files for which checksums should be generated.  This method is primarily used
	 * as a helper accessor to allow for the linking of configurations from this extension into the corresponding
	 * {@link GenerateJavaMigrationChecksumTask} task.
	 *
	 * 
	 */
	protected ConfigurableFileCollection getMigrationSourceFiles() {
		return this.migrationSourceFiles;
	}


	/**
	 * Gets any Any-style include/exclude patterns that may be used to further refine the set of migration
	 * source files that will be targeted by {@link GenerateJavaMigrationChecksumTask}.
	 *
	 * 
	 */
	protected PatternFilterable getPatternSet() {
		return this.patternSet;
	}

	/**
	 * Sets the source migration files, which are evaluated as via {@link org.gradle.api.Project#files(Object...)}.
	 *
	 * @param source The source.
	 */
	public void setSource(Object source) {
		this.migrationSourceFiles.setFrom(source);
	}

	public FlywayJavaMigrationChecksumPluginExtension source(Object... sources) {
		migrationSourceFiles.from(sources);
		return this;
	}

	/**
	 * Adds an Ant style include path, which may be further augmented with other inclusion or exclusion patterns.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension include(String... includes) {
		patternSet.include(includes);
		return this;
	}

	/**
	 * Adds an Ant style include path, which may be further augmented with other inclusion or exclusion patterns.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension include(Iterable<String> includes) {
		patternSet.include(includes);
		return this;
	}

	/**
	 * Adds an include spec, which may be further augmented with other include/exclude specs.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension include(Spec<FileTreeElement> includeSpec) {
		patternSet.include(includeSpec);
		return this;
	}

	/**
	 * Adds an include spec, which may be further augmented with other include/exclude specs
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension include(Closure includeSpec) {
		patternSet.include(includeSpec);
		return this;
	}

	/**
	 * Adds an Ant style exclude path, which may be further augmented with other inclusion or exclusion patterns
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension exclude(String... excludes) {
		patternSet.exclude(excludes);
		return this;
	}

	/**
	 * Adds an Ant style exclude path, which may be further augmented with other inclusion or exclusion patterns.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension exclude(Iterable<String> excludes) {
		patternSet.exclude(excludes);
		return this;
	}

	/**
	 * Adds an exclude spec, which may be further augmented with other include/exclude specs.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension exclude(Spec<FileTreeElement> excludeSpec) {
		patternSet.exclude(excludeSpec);
		return this;
	}

	/**
	 * Adds an exclude spec, which may be further augmented with other include/exclude specs.
	 *
	 * 
	 * 
	 */
	public FlywayJavaMigrationChecksumPluginExtension exclude(Closure excludeSpec) {
		patternSet.exclude(excludeSpec);
		return this;
	}

}
